name: CLDP Promotion Job
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        required: true
        description: "Platform (aws)"
        options:
        - aws
      source_env:
        description: "Source Environment(dev spro int stage preprod)"
        type: choice
        default: dev
        options:
        - dev
        - int
        - spro
        - stage
        - preprod
        required: true
      target_env:
        description: "Target Environment(int stage preprod prod)"
        type: choice
        default: int
        options:
        - int
        - prod
        - stage
        - preprod
        required: true
      components:
        description: "Components to promote ( all integration-server  universal-messaging terracotta-server)"
        default: terracotta-server
        required: true
      tags:
        description: "Tags of corresponding components ( all or specific tag for the component )"
        required: false
      app_version:
        description: "Current App Version"
        default: "1012"
        required: true
jobs:
  Promote-Images:
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v2
         name: Checkout the current repository

       - name: Details
         id: shell
         run: |
           s="secrets.AWS_DEV_REGION"
           echo "::set-output name=sec::secrets.AWS_DEV_REGION"
         shell: bash
         
       - name: Details
         id: shell2
         run: |
           echo "${{ steps.shell.outputs.sec }}"
         shell: bash 
         
       - name: Apply Env File
         id: vars
         run: |
          chmod 777 variable.env
          ./variable.env

       - name: Validate Inputs
         uses: ./image-deployment/actions/promotion-inputvalidation
         with:
            target_env: ${{ github.event.inputs.target_env }}
            source_env: ${{ github.event.inputs.source_env }}
            component: ${{ github.event.inputs.components }}
            tag: ${{ github.event.inputs.tags }}
            platform: ${{ github.event.inputs.platform }}
            app_version: ${{ github.event.inputs.app_version }}
            validversion: ${{ steps.vars.outputs.CURRENT_MAJOR_VERSION }}
            
       - name: Configure AWS Credentials for dev ecr
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEV_REGION }}
         if: github.event.inputs.source_env == 'dev' && github.event.inputs.platform == 'aws'
       -  name: ECR RnD Login
          id: ecr-dev-login
          uses: aws-actions/amazon-ecr-login@v1
          if: github.event.inputs.source_env == 'dev' && github.event.inputs.platform == 'aws'
          
       - name: AWS Int login
         uses: aws-actions/configure-aws-credentials@v1
         with:
            aws-access-key-id: ${{ secrets.AWS_INT_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_INT_SECRET_KEY }}
            aws-region: ${{ secrets.AWS_INT_REGION }}
         if: (github.event.inputs.target_env == 'int' || github.event.inputs.source_env == 'int') && (github.event.inputs.platform == 'aws') 
       - name: ECR Int Login
         id: ecr-int-login
         uses: aws-actions/amazon-ecr-login@v1
         if: (github.event.inputs.target_env == 'int' || github.event.inputs.source_env == 'int') && (github.event.inputs.platform == 'aws')
 
       - name: Set up Reg URLs
         id: img-regs
         run: |
          if [[ ${{ github.event.inputs.source_env }} == "dev" ]]
          then
            echo "::set-output name=AWS_SOURCE_REPO_PREFIX::${{ steps.vars.outputs.AWS_DEV_REPO_PREFIX }}"
            echo "::set-output name=AWS_TARGET_REPO_PREFIX::${{ steps.vars.outputs.AWS_INT_REPO_PREFIX }}"
            echo "::set-output name=AWS_SOURCE_REG_URL::${{ steps.ecr-dev-login.outputs.registry }}"
            echo "::set-output name=AWS_TARGET_REG_URL::${{ steps.ecr-int-login.outputs.registry }}"
          fi
          
       - name: Validate image
         uses: ./image-deployment/actions/deploy-image-verification
         with:
            tag: ${{ github.event.inputs.tags }}
            component: ${{ github.event.inputs.components }}
            source_aws_registry: ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}
            source_aws_repo_prefix: ${{ steps.img-regs.outputs.AWS_TARGET_REPO_PREFIX }}
            image_with_tag: ${{ steps.vars.outputs.DEV_REFRESH_IMAGES }}
            env: ${{ github.event.inputs.target_env }}
            type: promotion

       - name: Configure AWS Credentials for s3
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}

       - name: Promote Images to Env
         uses: ./image-deployment/actions/promote-image
         with:
          platform: ${{ github.event.inputs.platform }}
          source_env: ${{ github.event.inputs.source_env }}
          target_env: ${{ github.event.inputs.target_env }}
          components: ${{ github.event.inputs.components }}
          tags: ${{ github.event.inputs.tags }}
          app_version: ${{ github.event.inputs.app_version }}
          bucket_name: ${{ steps.vars.outputs.S3_BUCKET }}
          metadata_path: ${{ steps.vars.outputs.METADATA_PATH }}
          source_aws_registry: ${{ steps.img-regs.outputs.AWS_SOURCE_REG_URL }}
          target_aws_registry: ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}
          source_aws_repo_prefix: ${{ steps.img-regs.outputs.AWS_SOURCE_REPO_PREFIX }}
          target_aws_repo_prefix: ${{ steps.img-regs.outputs.AWS_TARGET_REPO_PREFIX }}
        

