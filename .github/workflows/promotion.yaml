name: CLDP Promotion Job
on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform (aws,azure,all)"
        default: aws
        required: true
        options:
        - foo
        - bar
        - baz
      source_env:
        description: "Source Environment(dev,int,stage,spro)"
        default: dev
        required: true
      target_env:
        description: "Target Environment(int,stage,preprod)"
        default: int
        required: true
      components:
        description: "Components to promote (universal-messaging,terracotta-server)"
        default: terracotta-server
        required: true
      tags:
        description: "Tags of corresponding components (applicable for dev and spro source envs)"
        required: false
      app_version:
        description: "Current App Version"
        default: "1012"
        required: true
jobs:
  Promote-Images:
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v2
         name: Checkout the current repository
         
       - name: Configure AWS Credentials for s3
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEV_REGION }}
       -  name: ECR RnD Login
          id: ecr-login
          uses: aws-actions/amazon-ecr-login@v1
          if: github.event.inputs.platform == 'aws' || github.event.inputs.platform == 'all'
          
       - name: AWS Preprod login
         uses: aws-actions/configure-aws-credentials@v1
         with:
            aws-access-key-id: ${{ secrets.AWS_PREPROD_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_PREPROD_SECRET_KEY }}
            aws-region: ${{ secrets.AWS_PREPROD_REGION }}
         if: github.event.inputs.target_env == 'int' && (github.event.inputs.platform == 'aws' || github.event.inputs.platform == 'all') 
       - name: ECR Preprod Login
         id: ecr-preprod-login
         uses: aws-actions/amazon-ecr-login@v1
         if: github.event.inputs.target_env == 'int' && (github.event.inputs.platform == 'aws' || github.event.inputs.platform == 'all')

       - name: Configure AWS Credentials for s3
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
       - name: Set up Reg URLs
         id: img-regs
         run: |
         
          echo "::set-output name=AWS_SOURCE_REG_URL::${{ steps.ecr-login.outputs.registry }}"
          echo 
          if [[ ${{ github.event.inputs.target_env }} == "int" ]]
          then
            echo "int"
            echo "::set-output name=AWS_TARGET_REG_URL::${{ steps.ecr-preprod-login.outputs.registry }}"
          else
            echo "dev"
            echo "::set-output name=AWS_TARGET_REG_URL::${{ steps.ecr-login.outputs.registry }}"
          fi
       - name: Set up Reg URLs
         run: |         
             docker pull ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}/cldp/cldp-is:10.5.22.04
           #  docker tag  ${{ steps.img-regs.outputs.AWS_SOURCE_REG_URL }}/terracotta-server:21.10 ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}/terracotta-server:21.10
         #    docker push ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}/terracotta-server:21.10
       - name: Promote Images to Env
         uses: ./image-deployment/actions/promote-image
         with:
          platform: ${{ github.event.inputs.platform }}
          source_env: ${{ github.event.inputs.source_env }}
          target_env: ${{ github.event.inputs.target_env }}
          components: ${{ github.event.inputs.components }}
          tags: ${{ github.event.inputs.tags }}
          app_version: ${{ github.event.inputs.app_version }}
          bucket_name: cldp
          metadata_path: buildfiles
          source_aws_registry: ${{ steps.img-regs.outputs.AWS_SOURCE_REG_URL }}
          target_aws_registry: ${{ steps.img-regs.outputs.AWS_TARGET_REG_URL }}
        
        

