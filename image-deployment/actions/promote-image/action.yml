name: "Promote Images"
description: "Promote Images to the target environment"
inputs:
  platform:
    description: "Platform"
    required: true
  source_env:
    description: "Source Environment"
    required: true
  target_env:
    description: "Target Environment"
    required: true
  components:
    description: "Components"
    required: true
  tags:
    description: "Components Tags"
    required: true
  app_version:
    description: current promotion process version
    required: true
  bucket_name:
    description: Metadata Bucket name
    required: true
  metadata_path:
    description: Metadata Path
    required: true
  source_aws_registry:
    description: Source AWS registry
    required: true
  target_aws_registry:
    description: Source AWS registry
    required: true
runs:
  using: composite
  steps:
    - name: promote-images
      shell: bash
      run: |
        if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
        fi
        echo platform: ${platforms}
        components=($(echo ${{ inputs.components }} | sed -e 's\,\ \g'))
        if [[ "${{ inputs.source_env }}" = "dev" || "${{ inputs.source_env }}" = "spro" ]]
        then
          tags=($(echo ${{ inputs.tags }} | sed -e 's\,\ \g'))
        else
          tags=()
        fi
        #--------------------------------------------Remove existing docker images------------------
          docker images
         docker rmi -f $(docker images -aq) 1> /dev/null
        #-----------------------------------------------------------------------------------------------
        
        for pindex in ${!platforms[@]}
        do
                sourcebuildfile="${platforms[${pindex}]}-${{ inputs.source_env }}-${{ inputs.app_version }}-deploy-builds.txt"
                targetbuildfile="${platforms[${pindex}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
                
                 #--------------------Check source file and tags is present or not--------------------------------------------------#
                 
                       sourceenv_filepresent=$(aws s3 ls s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$sourcebuildfile || true)
                       if [[ "$sourceenv_filepresent" == "" ]]
                       then
                          echo "No deployments done in source env, Cannot promote stable builds . Can u please first promote to ${{ inputs.source_env }}"
                          exit 1
                       fi
                        aws s3 cp s3://${{ inputs.bucket_name  }}/${{ inputs.metadata_path }}/$sourcebuildfile $sourcebuildfile 
                       for cindex in ${!components[@]}
                       do
                           component_present=`sed -n "/^${components[${cindex}]}: ${tags[${cindex}]}.*/p" $sourcebuildfile || true`
                           if [[ "$component_present" = "" ]]
                           then
                              echo "${components[$cindex]}: ${tags[${cindex}]} Image with tag not deployed in previous env"
                              exit 1
                           fi  
                        done        
                 
                   #---------------------------------Compare the SHA code for source env and source repository---------------------------------------------#


               
                 
                 #-----------------------Target file creation -----------------------------------------------#
                  targetenv_filepresent=$(aws s3 ls s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile || true)
                  if [[ "$targetenv_filepresent" == "" ]]
                  then
                    echo "target env buile file not present, so target file is created now"
                    touch "./${targetbuildfile}"
                  else
                    echo "taget env built file present"
                    aws s3 cp s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile $targetbuildfile
                  fi
                  
                  #------------------Target file is updated ------------------------------------------------#
                  for cindex in ${!components[@]}
                  do
                    if [[ "${{ inputs.source_env }}" = "dev" || "${{ inputs.source_env }}" = "spro" ]]
                    then
                        component_tag=${tags[${cindex}]}
                    else
                        component_tag=$(sed -n "/^${components[${cindex}]}:.*/p" $sourcebuildfile | awk '{print $2}' | tr -d [:space:])
                    fi
                    target_tag_present=`sed -n "/^${components[${cindex}]}:.*/p" $targetbuildfile || true`
                    if [[ "$target_tag_present" = "" ]]
                    then
                      echo "tag for ${components[${cindex}]} not present in target file add it"
                      echo "${components[${cindex}]}: $component_tag" >> $targetbuildfile
                    else
                      echo "tag for ${components[${cindex}]} present in target file changing it"
                      sed -i "s/${components[${cindex}]}:.*/${components[${cindex}]}: $component_tag/g" $targetbuildfile
                    fi
                  done
                  cat $targetbuildfile
         done
                  for cindex in ${!components[@]}
                  do
        
                    docker pull ${{ inputs.source_aws_registry }}/${components[${cindex}]}:${tags[${cindex}]}
                   done
                   docker images
               # docker tag ${{ inputs.source_aws_registry }}/terracotta-server:21.10 ${{ inputs.target_aws_registry }}/terracotta-server:21.10.0
               # docker push ${{ inputs.target_aws_registry }}/terracotta-server:21.10.0
        for pindex in ${!platforms[@]}
        do
          targetbuildfile=${platforms[${pindex}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt
          sourcebuildfile="${platforms[${pindex}]}-${{ inputs.source_env }}-${{ inputs.app_version }}-deploy-builds.txt"
          aws s3 cp $targetbuildfile s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile
          rm -f $targetbuildfile
          rm -f $sourcebuildfile 
        done
        
