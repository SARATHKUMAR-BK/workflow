name: "Promote Images"
description: "Promote Images to the target environment"
inputs:
  platform:
    description: "Platform"
    required: true
  source_env:
    description: "Source Environment"
    required: true
  target_env:
    description: "Target Environment"
    required: true
  components:
    description: "Components"
    required: true
  tags:
    description: "Components Tags"
    required: true
  app_version:
    description: current promotion process version
    required: true
  bucket_name:
    description: Metadata Bucket name
    required: true
  metadata_path:
    description: Metadata Path
    required: true
  source_aws_registry:
    description: Source AWS registry
    required: true
  target_aws_registry:
    description: Source AWS registry
    required: true
  source_aws_repo_prefix:
    description: Source AWS Repo
    required: true
runs:
  using: composite
  steps:
    - name: promote-images
      shell: bash
      run: |
        if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
        fi
        echo platform: ${platforms}
        components=($(echo ${{ inputs.components }} | sed -e 's\,\ \g'))
        if [[ "${{ inputs.source_env }}" = "dev" || "${{ inputs.source_env }}" = "spro" ]]
        then
          tags=($(echo ${{ inputs.tags }} | sed -e 's\,\ \g'))
        else
          tags=()
        fi
        
        echo "source_aws_repo_prefix  ${{ inputs.source_aws_repo_prefix }}"
        echo "source_aws_registry  ${{ inputs.source_aws_registry }}"
        echo "target_aws_registry  ${{ inputs.target_aws_registry }}"
        #--------------------------------------------Remove existing docker images------------------
        #  docker images
        # docker rmi -f $(docker images -aq) 1> /dev/null
        #-----------------------------------------------------------------------------------------------
        
        for pindex in ${!platforms[@]}
        do
                sourcebuildfile="${platforms[${pindex}]}-${{ inputs.source_env }}-${{ inputs.app_version }}-deploy-builds.txt"
                targetbuildfile="${platforms[${pindex}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-promote-builds.txt"
                
                 #--------------------Check source file and tags is present or not--------------------------------------------------#
                 
                       sourceenv_filepresent=$(aws s3 ls s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$sourcebuildfile || true)
                       if [[ "$sourceenv_filepresent" == "" ]]
                       then
                          echo "No deployments done in source env, Cannot promote stable builds . Can u please first promote to ${{ inputs.source_env }}"
                          exit 1
                       fi
                       aws s3 cp s3://${{ inputs.bucket_name  }}/${{ inputs.metadata_path }}/$sourcebuildfile $sourcebuildfile 
                        
                       if [[ !("${{inputs.components}}" =~ "all") ]]
                       then
                          for cindex in ${!components[@]}
                          do
                              component_present=`sed -n "/^${components[${cindex}]}: ${tags[${cindex}]}.*/p" $sourcebuildfile || true`
                              if [[ "$component_present" = "" ]]
                              then
                                  echo "${components[$cindex]}: ${tags[${cindex}]} Image with tag not deployed in previous env"
                                  exit 1
                              fi  
                            done     
                       fi
                 
                   #---------------------------------Compare the SHA code for source env and source repository---------------------------------------------#
                   
              echo "Source file details"
               cat $sourcebuildfile
              echo "--------------------------------------"
                                        #----------------------Check all component------------------------------------------
             if [[ ("${{inputs.components}}" =~ "all") ]]
             then
                  echo "User choose all component"
                 while IFS= read -r line
                 do
                    component_name=`echo "$line" | cut -d " " -f 1`
                    tag_name=`echo "$line" | cut -d " " -f 1`
                    sha_in_deplyfile=`echo "$line" | cut -d " " -f 3`
                     docker pull ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/$component_name:$tag_name
                     sha_in_repo=`docker inspect --format='{{.RepoDigests}}' ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/$component_name:$tag_name  | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/$component_name  | cut -d "@" -f 2`
                      echo "sha_in_repo=== $sha_in_repo"
                     if [[ "$sha_in_deplyfile" != "$sha_in_repo" ]]
                     then
                        echo "both sha is differ"
                        echo "In deploy file--> $component_name:$tag_name=$sha_in_deplyfile"
                         echo "In repo--> $component_name:$tag_name=$sha_in_repo"
                         echo "Pls first deploy the $component_name:$tag_name=$sha_in_repo to ${{ inputs.source_env }}"
                        exit 1
                     fi  
                 done < $sourcebuildfile
             else
                 for cindex in ${!components[@]}
                 do
                     sha_in_deplyfile=$(sed -n "/^${components[${cindex}]}: ${tags[${cindex}]}.*/p" $sourcebuildfile | awk '{print $3}' | tr -d [:space:])
                     echo "sha_in_deplyfile   $sha_in_deplyfile"

                     docker pull ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]}
                     sha_in_repo=`docker inspect --format='{{.RepoDigests}}' ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]}  | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}  | cut -d "@" -f 2`
                    # =`aws ecr describe-images --repository-name=${components[${cindex}]} --image-ids imageTag=${tags[${cindex}]} | jq '.imageDetails[0].imageDigest' -r`
                      echo "sha_in_repo=== $sha_in_repo"
                     if [[ "$sha_in_deplyfile" != "$sha_in_repo" ]]
                     then
                        echo "both sha is differ"
                        exit 1
                     fi  
                  done   
               fi
               

               
                 
                 #-----------------------Target file creation -----------------------------------------------#
                  targetenv_filepresent=$(aws s3 ls s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile || true)
                  if [[ "$targetenv_filepresent" == "" ]]
                  then
                    echo "target env buile file not present, so target file is created now"
                    touch "./${targetbuildfile}"
                  else
                    echo "taget env built file present"
                    aws s3 cp s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile $targetbuildfile
                  fi
                  
                  #------------------Target file is updated ------------------------------------------------#
                  for cindex in ${!components[@]}
                  do
                    target_tag_present=`sed -n "/^${components[${cindex}]}: ${tags[${cindex}]}.*/p" $targetbuildfile || true`
                   sha_in_repo=`docker inspect --format='{{.RepoDigests}}' ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]}  | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}  | cut -d "@" -f 2`
                    if [[ "$target_tag_present" = "" ]]
                    then
                      echo "tag for ${components[${cindex}]} not present in target file add it"
                      echo "${components[${cindex}]}: ${tags[${cindex}]}: $sha_in_repo" >> $targetbuildfile
                    else
                      echo "tag for ${components[${cindex}]} present in target file changing it"
                      sed -i "s/${components[${cindex}]}: ${tags[${cindex}]}.*/${components[${cindex}]}: ${tags[${cindex}]}: $sha_in_repo/g" $targetbuildfile
                    fi
                  done
                  cat $targetbuildfile
         done
         
         #------------------------------------------------pushed to target repo------------------------------------#
                  for cindex in ${!components[@]}
                  do
 
                    docker tag ${{ inputs.source_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]} ${{ inputs.target_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]}
                    docker push ${{ inputs.target_aws_registry }}/${{ inputs.source_aws_repo_prefix }}/${components[${cindex}]}:${tags[${cindex}]}
                  done
                  
        for pindex in ${!platforms[@]}
        do
          targetbuildfile=${platforms[${pindex}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-promote-builds.txt
          sourcebuildfile="${platforms[${pindex}]}-${{ inputs.source_env }}-${{ inputs.app_version }}-deploy-builds.txt"
          aws s3 cp $targetbuildfile s3://${{ inputs.bucket_name }}/${{ inputs.metadata_path }}/$targetbuildfile
          rm -f $targetbuildfile
          rm -f $sourcebuildfile 
        done
        
        #--------------------------------------------Remove existing docker images------------------
       #   docker images
        # docker rmi -f $(docker images -aq) 1> /dev/null

        
