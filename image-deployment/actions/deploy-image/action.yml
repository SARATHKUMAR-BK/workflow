name: 'Deploy Image'
description: 'Deploy Stable Image'
inputs:
  target_env:
    description: Environment Name (Possible values are dev, int, pstage stage and spro)
    default: dev
    required: true
  platform:
    description: Cloud provide(Possible values are aws, azure, all)
    default: aws
    required: true
  tag:
    description: Image Tag
    default: v1
    required: false
  component:
    description: Name of the component(Possible value is portalbundle)
    default: portalbundle
    required: false
  bucket_name:
    description: S3 bucket name where stable build metadata will be retrieved
    default: example
    required: true
  metadata_path:
    description: S3 bucket folder path where stable build metadata will be retrieved
    default: test
    required: true
  app_version:
    description: Specify the current app version ( Example 1012 )
    default: "1012"
    required: true
  source_aws_registry:
    description: Source AWS registry
    required: true
  source_aws_repo_prefix:
    description: source_aws_repo_prefix
    required: true
runs:
  using: 'composite'
  steps:
  - name: Details of the Job
    run: |
      echo "Target Environment - ${{ inputs.target_env }}"
      echo "Cloud Platform - ${{ inputs.platform }}"
      echo "Components - ${{ inputs.component }}"
      echo "Tags - ${{ inputs.tag }}"
      echo ${{ inputs.target_env }}
    shell: bash
  - name: Deploy Stable Image
    run: |
      if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
      fi
      components=($(echo ${{ inputs.component }} | sed -e 's\,\ \g'))
      tags=($(echo ${{ inputs.tag }} | sed -e 's\,\ \g'))
      echo "${components[@]}"
      echo "${tags[@]}"
      echo " "
          for platforms_index in ${!platforms[@]} 
          do
            deployment_file="${platforms[${platforms_index}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
            lookforfile=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file || true)
            if [[ "$lookforfile" == "" ]]
            then
              echo "new $deployment_file is create now"
              touch "./${deployment_file}"
            else
              echo "copy the ${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file to local"
              aws s3 cp s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file $deployment_file
            fi
            
            
            for component_index in ${!components[@]}
            do
              echo "inside for loop"
              lookforcomponent=`sed -n "/^${components[${component_index}]}: ${tags[${component_index}]}.*/p" $deployment_file || true`
              
            if [[ "$lookforcomponent" = "" ]]
              then
                      shaID=$(grep -i "${components[${component_index}]}: ${tags[${component_index}]}" shafile.txt | cut -d " " -f 3)
                      echo "SHAID : $shaID"
                      echo "${components[${component_index}]}: ${tags[${component_index}]}: $shaID" >> $deployment_file
              else
                      sed -i "s/${components[${component_index}]}: ${tags[${component_index}]}.*/${components[${component_index}]}: ${tags[${component_index}]}: $shaID/g" $deployment_file
              fi
            done
          done

        
        
        #------------------------------------------------------------------------------Start deploying to environment------------------------------------------------------------------------------
        datelabel=$(TZ=IST-5:30 date | sed 's/ /-/g')
        for platform_index in ${!platforms[@]}
        do

          chmod 777 ./image-deployment/actions/deploy-image/dep.sh
          bash ./image-deployment/actions/deploy-image/dep.sh

          aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file
          aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/${datelabel}-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt
       
           rm -rf shafile.txt
          rm -rf deployment_file
       done
    shell: bash
    
    
  - name: Delete old Builds
    run: |
        if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
        fi
        echo "${platforms[*]}"
        for cldp_platform in ${!platforms[@]}
        do
          echo "Build History of ${platforms[$cldp_platform]}-${{ inputs.target_env }}"
          aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$cldp_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
          fcount=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$cldp_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt" | wc -l)
          echo "$fcount"
          if [[ $fcount -le 3 ]]
          then
                  echo "Deletion cancelled."
          else
                  aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$cldp_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt" | sort -nr | tail +4 | while read filename
          do
                  echo "Deleting file $filename"
                  aws s3 rm s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$filename
                  echo "$filename deleted sucessfully"
          done
          fi
        done
    shell: bash
