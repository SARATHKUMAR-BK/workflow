name: 'Deploy Image'
description: 'Deploy Stable Image'
inputs:
  target_env:
    description: Environment Name (Possible values are dev, int, pstage stage and spro)
    default: dev
    required: true
  platform:
    description: Cloud provide(Possible values are aws, azure, all)
    default: aws
    required: true
  tag:
    description: Image Tag
    default: v1
    required: false
  component:
    description: Name of the component(Possible value is portalbundle)
    default: portalbundle
    required: false
  bucket_name:
    description: S3 bucket name where stable build metadata will be retrieved
    default: example
    required: true
  metadata_path:
    description: S3 bucket folder path where stable build metadata will be retrieved
    default: test
    required: true
  app_version:
    description: Specify the current app version ( Example 1012 )
    default: "1012"
    required: true
  source_aws_registry:
    description: Source AWS registry
    required: true
  source_aws_repo_prefix:
    description: source_aws_repo_prefix
    required: true
runs:
  using: 'composite'
  steps:
  - name: Details of the Job
    run: |
      echo "Target Environment - ${{ inputs.target_env }}"
      echo "Cloud Platform - ${{ inputs.platform }}"
      echo "Components - ${{ inputs.component }}"
      echo "Tags - ${{ inputs.tag }}"
      echo ${{ inputs.target_env }}
    shell: bash
  - name: Deploy Stable Image
    run: |
      if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
      fi
      components=($(echo ${{ inputs.component }} | sed -e 's\,\ \g'))
      tags=($(echo ${{ inputs.tag }} | sed -e 's\,\ \g'))
      echo "${components[@]}"
      echo "${tags[@]}"
      echo " "
      if [[ "${{ inputs.target_env }}" = "dev" || "${{ inputs.target_env }}" = "spro" ]]
        then
          for platforms_index in ${!platforms[@]} 
          do
            deployment_file="${platforms[${platforms_index}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
            lookforfile=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file || true)
            if [[ "$lookforfile" == "" ]]
            then
              touch "./${deployment_file}"
            else
              aws s3 cp s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file $deployment_file
            fi
            for component_index in ${!components[@]}
            do
              lookforcomponent=`sed -n "/^${components[${component_index}]}:/p" $deployment_file || true`
               docker pull ${{ inputs.source_aws_registry }}/${components[${cindex}]}:${tags[${cindex}]}
                   shaID=`docker inspect --format='{{.RepoDigests}}' ${{ inputs.source_aws_registry }}/${components[${cindex}]}:${tags[${cindex}]}  | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep ${{ inputs.source_aws_registry }}/${components[${cindex}]}  | cut -d "@" -f 2`
                
             # shaID=$(aws ecr describe-images --repository-name=${components[${component_index}]} --image-ids imageTag=${tags[${component_index}]}  | jq '.imageDetails[0].imageDigest' -r)
              if [[ "$lookforcomponent" = "" ]]
              then
                      echo "${components[${component_index}]}: ${tags[${component_index}]}: $shaID" >> $deployment_file
              else
                      sed -i "s/${components[${component_index}]}: ${tags[${component_index}]}.*/${components[${component_index}]}: ${tags[${component_index}]}: $shaID/g" $deployment_file
              fi
            done
          done
        else
          for platform_index in ${!platforms[@]}
          do
            deployment_file="${platforms[${platform_index}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
            aws s3 cp s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file $deployment_file
          done
        fi
        
        
        #------------------------------------------------------------------------------Start deploying to environment------------------------------------------------------------------------------
        datelabel=$(TZ=IST-5:30 date | sed 's/ /-/g')
        for platform_index in ${!platforms[@]}
        do
          image_components=()
          image_tags=()
          deployment_file="${platforms[${platform_index}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
          for component_index in ${!components[@]}
          do
            image_components+=($(sed -n "/^${components[${component_index}]}:/p" $deployment_file | awk -F ':' '{print $1}' | tr -d [:space:]))
            image_tags+=($(sed -n "/^${components[${component_index}]}:/p" $deployment_file | awk '{print $2}' | tr -d [:space:]))
          done
          echo "Deployment Images to  ${platforms[$platform_index]} for ${{ inputs.target_env }} environment"
          echo ${image_components[@]}
          echo ${image_tags[@]}
          add_component_seperator=$(IFS=',';echo "${image_components[*]}")
           echo ${add_component_seperator[@]}
        # refresh_components = a,b,c,d...  10.11,10.12,10.13,....
          add_tag_seperator=$(IFS=',';echo "${image_tags[*]}")
          echo ${add_tag_seperator[@]}
          chmod 777 ./image-deployment/actions/deploy-image/dep.sh
          bash ./image-deployment/actions/deploy-image/dep.sh
          if [[  "${{ inputs.target_env }}" = "dev" || "${{ inputs.target_env }}" = "spro" ]]
          then
            aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file
          fi
          aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/${datelabel}-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt
        done
    shell: bash
