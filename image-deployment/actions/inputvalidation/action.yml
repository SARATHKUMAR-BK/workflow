name: "Input Validation"
description: "Input Validation for the parameters passed"
inputs:
  target_env:
    description: Target environment
    required: true
  platform:
    description: Target Platform
    required: true
  component:
    description: Deployed Component
    required: true
  tag:
    description: Deployed tag
    required: true
  app_version:
    description: App version
    required: true
  validversion:
    description: "valid major versions"
    required: true 
runs:
  using: composite
  steps:
    - name: Validate Inputs
      run: |
        valid_env=(dev spro int stage preprod prod)
        valid_components=("integration-server" "universal-messaging" "terracotta-server" )
        valid_platform=(aws azure all)
        if [[ ! (" ${valid_env[*]} " =~ " ${{inputs.target_env}} ") ]]
        then
          echo "Provide the proper environment listed here [ ${valid_env[*]} ]" 
          exit 1
        fi
        if [[ ! (" ${valid_platform[*]} " =~ " ${{inputs.platform}} ") ]]
        then
          echo "Provide the proper platforms listed here [ ${valid_platform[*]} ]" 
          exit 1
        fi
        
          if [[ ("${{inputs.component}}" =~ "all") ]]
          then
              echo "inside if"
              if [[ !("all" =~ "${{inputs.tag}}") ]]
              then
                echo "If component is all then tag must be all" 
                exit 1
              fi
          else
          
              IFS="," read -a components <<< ${{ inputs.component }}
              IFS="," read -a tags <<< ${{ inputs.tag }}
              if [[ ${#components[@]} -ne ${#tags[@]} ]]
              then
                echo "Image and tags count are mismatching , Pls provide crt image and tag pair"
                exit 1
              fi
              for cldp_component in ${!components[@]}
              do
                if [[ ! (" ${valid_components[*]} " =~ "${components[$cldp_component]}") ]]
                then
                  echo " ${components[$cldp_component]} name is wrong"
                  exit 1 
                fi 
              done
            fi
          #-----------------------------------------checking app version--------------------------------------------------  
          echo "validversion  = ${{ inputs.validversion}}   app_version=${{ inputs.app_version }}"
          if [[ !(" ${{ inputs.validversion}} " == " ${{ inputs.app_version }} ") ]]
          then
            echo "Invalid Major version ${{ inputs.app_version }}"
          exit 1
          fi
      shell: bash
