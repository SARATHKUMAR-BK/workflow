name: "Input Validation"
description: "Input Validation for the parameters passed"
inputs:
  source_env:
    description: source environment
    required: true
  target_env:
    description: Target environment
    required: true
  platform:
    description: Target Platform
    required: true
  component:
    description: Deployed Component
    required: true
  tag:
    description: Deployed tag
    required: true
  app_version:
    description: App version
    required: true
  validversion:
    description: "valid major versions"
    required: true 
runs:
  using: composite
  steps:
    - name: Validate Inputs
      run: |
        valid_src_env=(dev spro int stage preprod)
        valid_target_env=(int stage preprod prod)
        valid_components=("integration-server: 10.5.22.04" "integration-server: 10.7.22.04" "integration-server: 10.11.22.04" "universal-messaging: 10.5.22.04" "universal-messaging: 10.7.22.04" "universal-messaging: 10.11.22.04" "terracotta-server: 10.5.22.04" "terracotta-server: 10.7.22.04" "terracotta-server: 10.11.22.04" )
        valid_platform=(aws azure all)
        valid_env_pair=(dev-int int-stage stage-preprod spro-preprod)
        
        #-----------------------------------------Checking  source_env--------------------------------------------------          
        if [[ ! (" ${valid_src_env[*]} " =~ " ${{inputs.source_env}} ") ]]
        then
          echo "Provide the proper environment listed here [ ${valid_src_env[*]} ] for source env" 
          exit 1
        fi 
        #-----------------------------------------Checking ptarget_env--------------------------------------------------           
        if [[ ! (" ${valid_target_env[*]} " =~ " ${{inputs.target_env}} ") ]]
        then
          echo "Provide the proper environment listed here [ ${valid_target_env[*]} ] for target " 
          exit 1
        fi
        #-----------------------------------------Checking source and target pair --------------------------------------------------           
        if [[ !(" ${valid_env_pair[*]} " =~ " ${{ inputs.source_env }}-${{ inputs.target_env }} ") ]]
        then
          echo "Cannot Promote Images from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          exit 1
        fi
        #-----------------------------------------Checking platform --------------------------------------------------        
  
        if [[ ! (" ${valid_platform[*]} " =~ " ${{inputs.platform}} ") ]]
        then
          echo "Provide the proper platforms listed here [ ${valid_platform[*]} ]" 
          exit 1
        fi
        
        #-----------------------------------------Checking component and tag --------------------------------------------------     
   
          if [[ !(" ${valid_versions[*]} " =~ " ${{inputs.currentversion}} ") ]]
          then
            echo "Invalid Major version ${{inputs.currentversion}}" 
            exit 1
          fi
        
          echo "component are: ${{ inputs.component }}"
          echo "tags are : ${{ inputs.tag }}"
        
          if [[ ("${{inputs.component}}" =~ "all") ]]
          then
              echo "inside if"
              if [[ !("all" =~ "${{inputs.tag}}") ]]
              then
                echo "inside else"
                echo "If component is all then tag must be all" 
                exit 1
              fi
          else
              components=($(echo ${{ inputs.component }} | sed -e 's\,\ \g'))
              tags=($(echo ${{ inputs.tag }} | sed -e 's\,\ \g'))
              if [[ ${#components[@]} -ne ${#tags[@]} ]]
              then
                echo "Image and tags count are mismatching , Pls provide crt image and tag pair"
                exit 1
              fi
              for cldp_component in ${!components[@]}
              do
                echo "inside for ${components[$cldp_component]}: ${tags[$cldp_component]} "
                if [[ ! (" ${valid_components[*]} " =~ " ${components[$cldp_component]}: ${tags[$cldp_component]} ") ]]
                then
                  echo " ${components[$cldp_component]}: ${tags[$cldp_component]} not found"
                  exit 1 
                fi 
              done 
            fi
          #-----------------------------------------checking app version--------------------------------------------------  
          echo "validversion  = ${{ inputs.validversion}}   app_version=${{ inputs.app_version }}"
         if [[ !(" ${{ inputs.validversion}} " == " ${{ inputs.app_version }} ") ]]
         then
          echo "Invalid Major version ${{ inputs.currentversion }}"
          exit 1
          fi
      shell: bash
